export type Patient = {
  id: string;
  fullName: string;
  sequenceNo: string;
  gender: string;
  age: string;
  fileNo: string;
  mobile: string;
  isEnabled: boolean;
  isVip: boolean;
  dateOfBirth: string;
  isTemporary: boolean;
  isEditable: boolean;
  nationalIdNumber: string;
  nationalIdType: string;
  insuranceName: string;
  mobileCode: string;
  occupation: string;
};

export type RPA = {
  id: number;
  clinicName: string;
  patientName: string;
  batchId: number;
  patientId: string;
  visitId: string;
  processStatus: string;
  remark: string;
};

export type BillingInfo = {
  billingInfoId: string;
  payorContext: number;
  payor: {
    id: string;
    name: string;
  };
  coverCategory: {
    id: string;
    name: string;
    decimal: number;
    comments: string;
    maxIndividualInvoiceLimit: number;
    totalCoPaymentAmount: number;
  };
  expiry: string;
  medNumber: string;
  medSuffix: string;
  memberRelational: {
    id: string;
  };
  insuredName: string;
  medicalAidScheme: string;
  isDefault: boolean;
  employeeId: string;
  isPreAuthorizationrequiredForInvoice: boolean;
  isAuthorizationCodeRequired: boolean;
  employeeCode: string;
  employee: {
    id: string;
    name: string;
  };
  isVisit: boolean;
  memberStartDate: string;
  visitId: string;
  patientId: string;
  memberStatus: number;
  thirdPartyName: string;
  additionalNotes: string;
  aggrementDetails: string;
  nationalIdNo: string;
  isScicomCorporate: boolean;
  totalCount: number;
};

export type PatientFullInfo = {
  id: string;
  titleGuid: string;
  sequenceNo: string;
  title: string;
  firstName: string;
  middleName: string;
  lastName: string;
  fullName: string;
  gender: string;
  isEnabled: boolean;
  age: string;
  dateOfBirth: string;
  fileNo: string;
  patientAdditionalInfo: {
    additionalInfoId: string;
    registrationDate: string;
    bloodGroup: string;
    patientCategory: any[]; // You can specify the type for patientCategory if needed
    description: string;
    isVip: boolean;
    isDeceased: boolean;
    isRegistrationPaid: boolean;
    isIncludeRegistrationFeeOption: boolean;
    deceasedDate: string;
    registrationLocation: string;
    patientId: string;
    registrationLocationId: string;
    registrationLocationName: string;
    registrationLocationCode: string;
    kinTitle: string;
    kinFirstName: string;
    kinMiddleName: string;
    kinLastName: string;
    kinMobile: string;
    kinEmail: string;
    deceasedReason: string;
    nationalIdNo: string;
    nationalIdType: string;
    nationality: string;
    allowPortalAccess: boolean;
    isInfoIncomplete: boolean;
    isConfidential: boolean;
    industryId: string;
    raceId: string;
    religionId: string;
    ethnicityId: string;
    isInactive: boolean;
    maritalStatus: number;
    isAllowReceiveRegistrationFees: boolean;
    advancedOccupation: string;
    moh: string;
    maritalStatusId: string;
    isMobileVerified: boolean;
    isOtpVerified: boolean;
    medicalIndeminity: string;
    countryOfBirth: string;
    cityOfBirth: string;
    isApproxAge: boolean;
    transGenderId: string;
    kinMobileCode: string;
  };
  billingInfo: BillingInfo[];
  referralInfo: {
    referralIdGuid: string;
    referredSource: {
      id: string;
    };
    referralContactNo: string;
    partnerId: string;
    partnerType: number;
    status: number;
    isLockedOut: boolean;
    lastActivityDate: string;
    failPasswordAttempt: number;
    isPasswordPolicyActivated: boolean;
    lastLoginDate: string;
  };
  invoiceAddress: {
    addressId: string;
    addressType: number;
    addressLine1: string;
    addressLine2: string;
    addressLine3Id: string;
    addressLine3: string;
    countryId: string;
    country: string;
    stateId: string;
    state: string;
    cityId: string;
    city: string;
    zipCode: string;
    tenantId: string;
    itemId: string;
    itemTypeId: string;
    referenceId: string;
    entityTypeId: number;
    availableInSubscription: number;
    createdBy: string;
    updatedBy: string;
    workFlow: number;
  };
  correspondenceAddress: {
    addressId: string;
    addressType: number;
    addressLine1: string;
    addressLine2: string;
    addressLine3Id: string;
    addressLine3: string;
    countryId: string;
    country: string;
    stateId: string;
    state: string;
    cityId: string;
    city: string;
    zipCode: string;
    tenantId: string;
    itemId: string;
    itemTypeId: string;
    referenceId: string;
    entityTypeId: number;
    availableInSubscription: number;
    createdBy: string;
    updatedBy: string;
    workFlow: number;
  };
  contact: {
    contactId: string;
    contactType: number;
    phone: string;
    mobile: string;
    email: string;
    fax: string;
    webUrl: string;
    note: string;
    tenantId: string;
    itemId: string;
    itemTypeId: string;
    referenceId: string;
    entityTypeId: number;
    availableInSubscription: number;
    createdBy: string;
    updatedBy: string;
    workFlow: number;
    workPhone: string;
    workEmailId: string;
    otherMobile: string;
    linkedinUrl: string;
    facebookUrl: string;
    twitterUrl: string;
    mobileCode: string;
    otherMobileCode: string;
    name: string;
  };
  balance: number;
  matched: number;
  unMatched: number;
  allowCredit: boolean;
  termAgreedOn: string;
  hasCurrentVisitManagePermission: boolean;
  totalRowCount: number;
  occupationId: string;
  isTemporary: boolean;
  allowDuplicate: boolean;
  previousVisitOverduePresent: boolean;
  receiptCount: number;
  refundCount: number;
  creditNoteCount: number;
  invoiceCount: number;
  visitCount: number;
  accountBalance: number;
  auditDetail: {
    creationDate: string;
    createdBy: string;
    modificationDate: string;
    modifiedBy: string;
    deletedBy: string;
    lastUpdated: string;
    isDeleted: boolean;
    isAdded: boolean;
  };
  totalDueAmount: number;
  patientDueAmount: number;
  insuranceDueAmount: number;
  corporateDueAmount: number;
  isShowNationalIdType: boolean;
  isAllowDuplicatePatientCreate: boolean;
  isMultipleIdSupportPatient: boolean;
  isReconfirm: boolean;
  patientMultiIds: string[];
  isAllowMultiIdSupportPatient: boolean;
  isScicomPatient: boolean;
  allowNsaDuplicate: boolean;
};

export type Relations = {
  tenantId: string;
  id: string;
  context: string;
  relationName: string;
  gender: number;
  relation: string;
  inverseRelation: string;
};

export type PatientDetailsResponse = {
  patient: PatientFullInfo;
  clinicAddress: {
    addressType: number;
    addressLine1: string;
    addressLine2: string;
    addressLine3Id: string;
    addressLine3: string;
    countryId: string;
    country: string;
    stateId: string;
    state: string;
    cityId: string;
    city: string;
    zipCode: string;
    tenantId: string;
    itemId: string;
    itemTypeId: string;
    referenceId: string;
    entityTypeId: number;
    availableInSubscription: number;
    createdBy: string;
    updatedBy: string;
    workFlow: number;
    isDefault: boolean;
    ownerId: string;
    locationId: string;
    virtualId: string;
  };
  relations: Relations[];
  status: string;
};
